{"version":3,"file":"ship-hold-querybuilder.js","sources":["../src/lib/aggregations.js","../src/lib/util.js","../src/lib/nodes.js","../src/builders/conditions.js","../src/lib/proxy-condition.js","../src/builders/clause.js","../src/builders/where.js","../src/builders/select.js","../src/builders/update.js","../src/builders/insert.js","../src/builders/delete.js","../src/index.js"],"sourcesContent":["const aggregateFunc = (fn) => (field, label = fn) => ({ value: field, as: label, fn: fn.toUpperCase() });\nexport const count = aggregateFunc('count');\nexport const avg = aggregateFunc('avg');\nexport const sum = aggregateFunc('sum');\n","export const fluentMethod = (fn) => function (...args) {\n    fn.bind(this)(...args);\n    return this;\n};\nexport const isBuildable = (val) => val.build && typeof val.build === 'function';\nexport const isSQLNodeValue = (val) => val && typeof val.value !== 'undefined';\nexport const isSubQuery = node => node.value && isBuildable(node.value);\nexport const identity = val => val;\n","import { identity, isBuildable, isSQLNodeValue } from './util';\nconst STAR = '*';\nconst isParamRegexp = /^\\$/;\nconst buildStringMethodFactory = (fn) => function (params = {}, offset = 1) {\n    const { node: { value } } = this;\n    const isParam = isParamRegexp.test(value);\n    const text = isParam ? '$' + offset : fn(value);\n    const values = isParam ? [params[value.substr(1)]] : [];\n    return { text, values };\n};\nconst isWrappedRegexp = /'(.*)'|\"(.*)\"|\\((.*)\\)|^\\$/;\nconst testWrap = (input) => isWrappedRegexp.test(input);\nconst wrap = (string, quote = '\"') => (testWrap(string) || string === STAR) ? string : quote + string + quote;\nconst parseValue = (value) => {\n    switch (typeof value) {\n        case 'string':\n            return wrap(value, `'`);\n        case 'object': {\n            if (value === null) {\n                return 'NULL';\n            }\n            if (Array.isArray(value)) {\n                return '(' + value.map(parseValue).join(',') + ')';\n            }\n            // Dates\n            if (value.toISOString) {\n                return wrap(value.toISOString(), `'`);\n            }\n            return `'${JSON.stringify(value)}'`;\n        }\n        default:\n            return value;\n    }\n};\nconst pointerNodeProto = {\n    build() {\n        const { node } = this;\n        let val;\n        if (testWrap(node.value)) {\n            val = node.value;\n        }\n        else {\n            const [first, ...rest] = node.value.split('.');\n            const parts = [wrap(first)];\n            if (rest.length > 0) {\n                parts.push(wrap(rest.join('.')));\n            }\n            val = parts.join('.');\n        }\n        const value = node.fn ? `${node.fn}(${val})` : val;\n        const text = node.as ? [value, 'AS', wrap(node.as)].join(' ') : value;\n        return { text, values: [] };\n    }\n};\nconst expressionNodeProto = {\n    build(params = {}, offset = 1) {\n        const { node } = this;\n        const { text, values } = node.value.build(params, offset);\n        const fullText = node.as ? [`(${text})`, 'AS', wrap(node.as)].join(' ') : `(${text})`;\n        return { text: fullText, values };\n    }\n};\nconst identityNodeProto = {\n    build: buildStringMethodFactory(identity)\n};\n// SQLNode that returns its own value when built\nexport const identityNode = (params) => {\n    const node = isSQLNodeValue(params) === false ? { value: params } : params;\n    return Object.create(identityNodeProto, {\n        node: {\n            get() {\n                return Object.assign({}, node);\n            }\n        }\n    });\n};\nconst compositeNodeProto = {\n    *[Symbol.iterator]() {\n        for (const n of this.nodes) {\n            if (n[Symbol.iterator] === undefined) {\n                yield n.node;\n            }\n            else {\n                yield* n;\n            }\n        }\n    },\n    add(...args) {\n        const nodeArgs = args.map(n => isBuildable(n) ? n : identityNode(n));\n        this.nodes.push(...nodeArgs);\n        return this;\n    },\n    build(params = {}, offset = 1) {\n        let off = offset;\n        const text = [];\n        const values = [];\n        for (const node of this.nodes) {\n            const { text: newText, values: newVals = [] } = node.build(params, off);\n            text.push(newText);\n            values.push(...newVals);\n            off += newVals.length;\n        }\n        return {\n            text: text.join(this.separator),\n            values\n        };\n    }\n};\nconst valueNodeProto = {\n    build: buildStringMethodFactory(parseValue)\n};\n// SQLNode that returns a scalar value when built\nexport const valueNode = (params) => {\n    const node = isSQLNodeValue(params) ? params : { value: params };\n    return Object.create(valueNodeProto, {\n        node: {\n            get() {\n                return Object.assign({}, node);\n            }\n        }\n    });\n};\n// SQLNode that returns a sql identifier when built\nexport const pointerNode = (params) => {\n    const node = isSQLNodeValue(params) ? params : { value: params };\n    return Object.create(pointerNodeProto, {\n        node: {\n            get() {\n                return Object.assign({}, node);\n            }\n        }\n    });\n};\n// SQLNode made from a sub builder (for subquery)\nexport const expressionNode = (params) => {\n    const node = isSQLNodeValue(params) ? params : { value: params };\n    return Object.create(expressionNodeProto, {\n        node: {\n            get() {\n                return Object.assign({}, node);\n            }\n        }\n    });\n};\n// SQLNode made of nodes\nexport const compositeNode = ({ separator = ' ' } = {\n    separator: ' ',\n    type: 'unknown composite'\n}) => Object.create(compositeNodeProto, {\n    nodes: { value: [] },\n    length: {\n        get() {\n            return this.nodes.length;\n        }\n    },\n    separator: { value: separator }\n});\n","import { compositeNode, expressionNode, valueNode, pointerNode, identityNode, } from '../lib/nodes';\nimport { fluentMethod, isBuildable } from '../lib/util';\nexport var SQLComparisonOperator;\n(function (SQLComparisonOperator) {\n    SQLComparisonOperator[\"EQUAL\"] = \"=\";\n    SQLComparisonOperator[\"LOWER_THAN\"] = \"<\";\n    SQLComparisonOperator[\"LOWER_THAN_OR_EQUAL\"] = \"<=\";\n    SQLComparisonOperator[\"GREATER_THAN\"] = \">\";\n    SQLComparisonOperator[\"GREATER_THAN_OR_EQUAL\"] = \">=\";\n})(SQLComparisonOperator || (SQLComparisonOperator = {}));\nexport default (conditionNodes = compositeNode()) => {\n    return {\n        or(...args) {\n            conditionNodes.add(identityNode('OR'));\n            return this.if(...args);\n        },\n        and(...args) {\n            conditionNodes.add(identityNode('AND'));\n            return this.if(...args);\n        },\n        if: fluentMethod((leftOperand, operator, rightOperand) => {\n            const leftOperandNode = isBuildable(leftOperand) ?\n                expressionNode(leftOperand) :\n                pointerNode(leftOperand);\n            let actualOperator = operator;\n            let actualRightOperand = rightOperand;\n            if (operator === undefined) {\n                conditionNodes.add(leftOperandNode);\n            }\n            else {\n                if (rightOperand === undefined) {\n                    actualRightOperand = operator;\n                    actualOperator = \"=\" /* EQUAL */;\n                }\n                const operatorNode = identityNode(actualOperator);\n                const rightOperandNode = isBuildable(actualRightOperand) ?\n                    expressionNode(actualRightOperand) :\n                    valueNode(actualRightOperand);\n                const whereNode = compositeNode()\n                    .add(leftOperandNode, operatorNode, rightOperandNode);\n                conditionNodes.add(whereNode);\n            }\n        }),\n        build(params = {}, offset = 1) {\n            return conditionNodes.build(params, offset);\n        }\n    };\n};\n","import conditions from '../builders/conditions';\nimport { compositeNode } from './nodes';\n// Create a condition builder proxy which will be revoked as soon as the main builder is called\nexport default (mainBuilder, nodes) => (leftOperand, operator, rightOperand) => {\n    const conditionNodes = compositeNode();\n    const delegate = conditions(conditionNodes)\n        .if(leftOperand, operator, rightOperand);\n    const revocable = Proxy.revocable(delegate, {\n        get(target, property) {\n            if (target[property] && property !== 'build') {\n                return target[property];\n            }\n            nodes.add(conditionNodes);\n            revocable.revoke();\n            return mainBuilder[property].bind(mainBuilder);\n        }\n    });\n    return revocable.proxy;\n};\n","import { expressionNode, pointerNode } from '../lib/nodes';\nimport { fluentMethod, isSubQuery } from '../lib/util';\nexport const nodeSymbol = Symbol('nodes');\nexport const clauseMixin = (...names) => {\n    const api = {\n        node(name, newNode) {\n            const node = this[nodeSymbol][name];\n            if (newNode === undefined) {\n                return node;\n            }\n            return this[nodeSymbol][name] = newNode;\n        }\n    };\n    for (const name of names) {\n        api[name] = fluentMethod(function (...args) {\n            this[nodeSymbol][name].add(...args.map(n => isSubQuery(n) ? expressionNode(n) : pointerNode(n)));\n        });\n    }\n    return api;\n};\n","import proxy from '../lib/proxy-condition';\nimport { nodeSymbol } from './clause';\nexport default function (leftOperand, operator, rightOperand) {\n    return proxy(this, this[nodeSymbol].where)(leftOperand, operator, rightOperand);\n}\n","import { compositeNode, valueNode, identityNode, pointerNode, expressionNode } from '../lib/nodes';\nimport proxy from '../lib/proxy-condition';\nimport { fluentMethod, identity, isSubQuery } from '../lib/util';\nimport { clauseMixin, nodeSymbol } from './clause';\nimport where from './where';\nconst joinFunc = (joinType) => function (table, leftOperand, rightOperand) {\n    const node = isSubQuery(table) ? expressionNode(table) : pointerNode(table); // todo\n    this[nodeSymbol].join.add(identityNode(joinType), node);\n    return leftOperand && rightOperand ? this.on(leftOperand, rightOperand) : this;\n};\nconst proto = Object.assign({\n    join: joinFunc('JOIN'),\n    leftJoin: joinFunc('LEFT JOIN'),\n    rightJoin: joinFunc('RIGHT JOIN'),\n    fullJoin: joinFunc('FULL JOIN'),\n    on(leftOperand, operator, rightOperand) {\n        // Todo throw exception if last join nodes is not a identity node\n        const { join } = this[nodeSymbol];\n        join.add('ON');\n        return proxy(this, join)(leftOperand, operator, rightOperand);\n    },\n    orderBy: fluentMethod(function (column, direction) {\n        const newOrderByNode = compositeNode();\n        newOrderByNode.add(pointerNode(column));\n        const actualDirection = ((direction && direction.toString()) || '').toUpperCase();\n        if (actualDirection === 'ASC' || actualDirection === 'DESC') {\n            newOrderByNode.add(identityNode(actualDirection));\n        }\n        this[nodeSymbol].orderBy.add(newOrderByNode);\n    }),\n    limit: fluentMethod(function (l, offset) {\n        this[nodeSymbol].limit.add(valueNode(l));\n        if (offset) {\n            this[nodeSymbol].limit.add(identityNode('OFFSET'), valueNode(offset));\n        }\n    }),\n    noop: fluentMethod(identity),\n    where,\n    build(params = {}) {\n        const queryNode = compositeNode();\n        const nodes = this[nodeSymbol];\n        const eventuallyAdd = (composite, keyWord) => {\n            if (composite.length > 0) {\n                queryNode.add(keyWord.toUpperCase(), composite);\n            }\n        };\n        eventuallyAdd(nodes.select, 'select');\n        eventuallyAdd(nodes.from, 'from');\n        if (nodes.join.length > 0) {\n            queryNode.add(nodes.join);\n        }\n        eventuallyAdd(nodes.where, 'where');\n        eventuallyAdd(nodes.orderBy, 'order by');\n        eventuallyAdd(nodes.limit, 'limit');\n        return queryNode.build(params);\n    }\n}, clauseMixin('from', 'select'));\nexport default (...args) => {\n    const nodes = {\n        orderBy: compositeNode({ separator: ', ' }),\n        limit: compositeNode(),\n        join: compositeNode(),\n        from: compositeNode({ separator: ', ' }),\n        select: compositeNode({ separator: ', ' }),\n        where: compositeNode()\n    };\n    const instance = Object.create(proto, { [nodeSymbol]: { value: nodes } });\n    if (args.length === 0) {\n        args.push('*');\n    }\n    return instance\n        .select(...args);\n};\n","import { compositeNode, pointerNode, valueNode } from '../lib/nodes';\nimport { fluentMethod } from '../lib/util';\nimport where from './where';\nimport { clauseMixin, nodeSymbol } from './clause';\nconst createSetNode = (prop, value) => compositeNode()\n    .add(pointerNode(prop), '=', valueNode(value));\nconst proto = Object.assign({\n    where,\n    set: fluentMethod(function (prop, value) {\n        const setNodes = value === undefined ?\n            Object.getOwnPropertyNames(prop)\n                .map(p => createSetNode(p, prop[p])) :\n            [createSetNode(prop, value)];\n        this[nodeSymbol].values.add(...setNodes);\n    }),\n    build(params = {}) {\n        const { table, values, from, where, returning } = this[nodeSymbol];\n        const queryNode = compositeNode()\n            .add('UPDATE', table, 'SET', values);\n        if (from.length > 0) {\n            queryNode.add('FROM', from);\n        }\n        if (where.length > 0) {\n            queryNode.add('WHERE', where);\n        }\n        if (returning.length > 0) {\n            queryNode.add('RETURNING', returning);\n        }\n        return queryNode.build(params);\n    }\n}, clauseMixin('returning', 'from', 'table'));\nexport default (tableName) => {\n    const instance = Object.create(proto, {\n        [nodeSymbol]: {\n            value: {\n                where: compositeNode(),\n                table: compositeNode({ separator: ', ' }),\n                returning: compositeNode({ separator: ', ' }),\n                from: compositeNode({ separator: ', ' }),\n                values: compositeNode({ separator: ', ' })\n            }\n        }\n    });\n    return instance.table(tableName);\n};\n","import { compositeNode, identityNode, valueNode } from '../lib/nodes';\nimport { fluentMethod } from '../lib/util';\nimport { clauseMixin, nodeSymbol } from './clause';\nconst proto = Object.assign({\n    value: fluentMethod(function (prop, value) {\n        this.field(prop);\n        this[nodeSymbol].values.add(value === undefined ? identityNode('DEFAULT') : valueNode(value));\n    }),\n    build(params = {}) {\n        const queryNode = compositeNode();\n        const { into, field, values, returning } = this[nodeSymbol];\n        queryNode.add('INSERT INTO', into, '(', field, ')', 'VALUES', '(', values, ')');\n        if (returning.length > 0) {\n            queryNode.add('RETURNING', returning);\n        }\n        return queryNode.build(params);\n    }\n}, clauseMixin('into', 'field', 'returning'));\nexport default (map = {}) => {\n    const instance = Object.create(proto, {\n        [nodeSymbol]: {\n            value: {\n                into: compositeNode({ separator: ', ' }),\n                field: compositeNode({ separator: ', ' }),\n                returning: compositeNode({ separator: ', ' }),\n                values: compositeNode({ separator: ', ' })\n            }\n        }\n    });\n    for (const [key, value] of Object.entries(map)) {\n        instance.value(key, value);\n    }\n    return instance;\n};\n","import { compositeNode } from '../lib/nodes';\nimport { clauseMixin, nodeSymbol } from './clause';\nimport where from './where';\nconst proto = Object.assign({\n    where,\n    from(...args) {\n        return this.table(...args);\n    },\n    build(params = {}) {\n        const { table, using, where } = this[nodeSymbol];\n        const queryNode = compositeNode()\n            .add('DELETE FROM', table);\n        if (using.length > 0) {\n            queryNode.add('USING', using);\n        }\n        if (where.length > 0) {\n            queryNode.add('WHERE', where);\n        }\n        return queryNode.build(params);\n    }\n}, clauseMixin('table', 'using'));\nexport default (tableName) => {\n    const instance = Object.create(proto, {\n        [nodeSymbol]: {\n            value: {\n                using: compositeNode(),\n                table: compositeNode(),\n                where: compositeNode()\n            }\n        }\n    });\n    if (tableName) {\n        instance.from(tableName);\n    }\n    return instance;\n};\n","import * as aggregations from './lib/aggregations';\nimport * as nodeFactories from './lib/nodes';\nexport { default as condition } from './builders/conditions';\nexport { default as select } from './builders/select';\nexport { default as update } from './builders/update';\nexport { default as insert } from './builders/insert';\nexport { default as delete } from './builders/delete';\nexport const nodes = nodeFactories;\nexport const aggregate = aggregations;\n"],"names":["proto","where"],"mappings":"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"}